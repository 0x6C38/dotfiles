
# =========================
*~
~$*
*$py.class
$RECYCLE.BIN/
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
# Android Studio captures folder
# Android Studio Navigation editor temp files
*.ap_
*.apk
App_Data/*.ldf
App_Data/*.mdf
AppPackages/
*.aps
Backup*/
# Backup & report files from converting an old project file to a newer
[Bb]in/
[Bb]uild[Ll]og.*
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
bin/
bower_components
# Bower dependency directory (https://bower.io/)
build/
*.build.csdef
build/Release
# Build results
.builds
# Built application files
# Byte-compiled / optimized / DLL files
.cache
.cache/
*.Cache
*.cachefile
captures/
celerybeat-schedule
# celery beat schedule file
# C extensions
*.class
# Click-Once directory
ClientBin/
# Compiled binary addons (https://nodejs.org/api/addons.html)
*-console.log
*.cover
.coverage
.coverage.*
coverage
# Coverage directory used by tools like istanbul
coverage.xml
.*crunch*.local.xml
csx
*.dbmdl
db.sqlite3
[Dd]ebug/
# Dependency directories
Desktop.ini
develop-eggs/
*.dex
# Directory for instrumented libs generated by jscoverage/JSCover
dist/
dist/*
# Distribution / packaging
# Django stuff:
.dmypy.json
dmypy.json
DocProject/buildhelp/
DocProject/Help/*.hhc
DocProject/Help/*.hhk
DocProject/Help/*.hhp
DocProject/Help/html
DocProject/Help/Html2
DocProject/Help/*.HxC
DocProject/Help/*.HxT
# DocProject is a documentation generator add-in
docs/_build/
*.docx#
*.dotCover
# DotCover is a Code Coverage Tool
# dotenv environment variables file
downloads/
.DS_Store
[Ee]xpress/
*.egg
*.egg-info/
.eggs/
eggs/
ehthumbs.db
# Enable "build/" folder in the NuGet Packages folder since NuGet packages use it for MSBuild targets
.ensime_cache/
.ensime_lucene/
# ensime specific
.env
env/
ENV/
env.bak/
# Environments
.eslintcache
.externalNativeBuild
# External native build folder generated in Android Studio 2.2 and later
# Files for the ART/Dalvik VM
## files generated by popular Visual Studio add-ons.
# Flask stuff:
# Folder config file
freeline/
# Freeline
freeline_project_description.json
freeline.py
gen/
GeneratedArtifacts/
Generated_Code/
# Generated files
# Google Services (e.g. APIs or Firebase)
google-services.json
*.gpState
.gradle/
# Gradle files
.grunt
# Grunt intermediate storage (http://gruntjs.com/creating-plugins#storing-task-files)
# Guidance Automation Toolkit
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
# [Here]
.history/
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
htmlcov/
.hypothesis/
*_i.c
.idea
.idea/dictionaries
.idea/gradle.xml
.idea/libraries
.idea/tasks.xml
.idea/workspace.xml
# Ignore subprojects's obj and bin
## Ignore Visual Studio temporary files, build results, and
*.ilk
*.iml
#   install all needed dependencies.
.installed.cfg
# Installer logs
# Installshield output folder
instance/
# IntelliJ
ipch/
*.ipr
.ipynb_checkpoints
# IPython
ipython_config.py
*.iws
# Java class files
#*.jks
jspm_packages/
# Jupyter Notebook
# Keystore files
*.ldb
.lib/
lib/
lib64/
lib-cov
.lib/.fuse*
lib_managed/
#LightSwitch generated files
# Local configuration file (sdk path, etc)
local.properties
local_settings.py
.lock-wscript
*.log
# Log Files
logs
# Logs
# Mac desktop service store files
*.manifest
MANIFEST
*.meta
# mkdocs documentation
*.mo
ModelManifest.xml
# MSTest test Results
# mypy
.mypy_cache/
.navigation/
*.ncb
*.ncrunch*
# NCrunch
.next
# next.js build output
node_modules/
.node_repl_history
# node-waf configuration
nosetests.xml
.nox/
.npm
npm-debug.log*
# NuGet Packages Directory
.nyc_output
# nyc test coverage
*.obj
*.odt#
[Oo]bj/
*.opensdf
# Optional eslint cache
# Optional npm cache directory
# Optional REPL history
# Others
out
out/
# Output of 'npm pack'
#packages/
!packages/*/build/
parts/
*_p.c
*.pch
*.pdb
*.pfx
*.pgc
*.pgd
*.pid
*.pidb
*.pid.lock
pids
pip-delete-this-directory.txt
# pipenv
#Pipfile.lock
pip-log.txt
pip-wheel-metadata/
*.pot
*.[Pp]ublish.xml
profile_default/
proguard/
# Proguard folder generated by Eclipse
project/boot/
project/plugins/project/
*.psess
publish/
*.publishsettings
# Publish Web Output
*.Publish.xml
_Pvt_Extensions/
# PyBuilder
__pycache__/
*.py[cod]
# pyenv
# PyInstaller
.pyre/
# Pyre type checker
.pytest_cache/
.Python
.python-version
# Recycle Bin used on file shares
_ReSharper*/
# ReSharper is a .NET coding add-in
# RIA/Silverlight projects
.ropeproject
# Rope project settings
[Rr]elease/
*.[Rr]e[Ss]harper
**/*.rs.bktarget
*.rsp
# Runtime data
# SageMath parsed files
*.sage.py
# Sample format subprojectDir/obj or subprojectDir/bin
*.sbr
# sbt specific
*.scc
.scrapy
# Scrapy stuff:
*.sdf
sdist/
*.seed
.serverless
# Serverless directories
share/python-wheels/
/site
*.sln.cache
*.sln.docstates
*.so
*.spec
# Sphinx documentation
.spyderproject
# Spyder project settings
.spyproject
sql/
# SQL Server files
src_managed/
[Ss]tyle[Cc]op.*
*.suo
/target
target/
_TeamCity*
# TeamCity is a build add-in
*.tgz
Thumbs.db
*.tlb
*.tlh
*.tli
*.tmp
*.tmp_proj
## TODO: If you have NuGet Package Restore enabled, uncomment the next line
.tox/
# Translations
[Tt]est[Rr]esult*/
# Typescript v1 declaration files
typings/
# Uncomment the following line if you do not want to check your keystore files in.
# Unit test / coverage reports
UpgradeLog*.htm
UpgradeLog*.XML
_UpgradeReport_Files/
*.user
# User-specific files
#  Usually these files are written by a python script from a template
.vagrant/
### Vagrant ###
var/
.venv
venv/
venv.bak/
# Visual C++ cache files
# Visual Studio profiler
# Visual Studio version. Backup files are not needed, because we have git ;-)
*.vsp
*.vspscc
*.vspx
*.vssscc
.webassets-cache
wheels/
# Windows Azure Build Output
# Windows detritus
# Windows image file caches
# Windows Store app package directory
x64/
yarn-debug.log*
yarn-error.log*
.yarn-integrity
# Yarn Integrity file
